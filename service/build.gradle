buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "http://maven.k-int.com/content/repositories/releases" }
  }
  dependencies {
    classpath "gradle.plugin.com.virgo47.gradle:ClasspathJar:1.0.0"
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "org.grails.plugins:database-migration:3.0.4"
    classpath "com.bmuschko:gradle-docker-plugin:3.2.1"
    classpath "org.grails.plugins:views-gradle:1.2.10"
    classpath "com.k_int.gradle:kint-gradle-plugin:1.0.1"
  }
}

group "mod.rs"

apply plugin: "com.virgo47.ClasspathJar"
apply plugin: "eclipse"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.plugins.views-json"
apply plugin: "com.bmuschko.docker-remote-api"
apply plugin: "com.k_int.gradle.plugin"

eclipse {
  classpath {
    defaultOutputDir = file('bin/main')
    file {
      whenMerged {
        def confEntries = (entries.findAll { it.path == 'grails-app/conf' }) as List
        
        if (confEntries) {
          def singleEnty = confEntries[0]
          
          // Remove all the entries.
          entries.removeAll ( confEntries )
          
          // Set the output directory, and re-add.
          singleEnty.output = "bin/main"
          entries << singleEnty
        }
      }
    }
  }
}

repositories {
  mavenLocal()
  // Ian: Added k-int nexus to act as a proxy repo for remote repos, and k-int specifics
  maven { url "http://nexus.k-int.com/content/groups/public" }
  maven { url "http://maven.k-int.com/content/repositories/releases" }
  maven { url "https://repo.grails.org/grails/core" }
  maven { url "http://maven.k-int.com/content/repositories/snapshots" }
  maven { url "https://repository.folio.org/repository/maven-folio" }
}

dependencies {
  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.grails:grails-core"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-codecs"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-datasource"
  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-web-boot"
  compile "org.grails:grails-logging"
  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:async"
  compile "org.grails.plugins:events"
  compile "org.grails.plugins:hibernate5"
  compile "org.grails.plugins:views-json"
  compile "org.springframework.boot:spring-boot-starter-undertow"
  
  
  compile 'org.grails.plugins:grails-java8'
  
  compile "org.hibernate:hibernate-java8:5.1.17.Final"
  compile "org.hibernate:hibernate-core:5.1.17.Final"
  
  compile "org.postgresql:postgresql:42.2.5"
  compile "org.grails.plugins:spring-security-core:3.2.3"
  compile "org.grails.plugins:database-migration:3.0.4"
  compile "org.liquibase:liquibase-core:3.5.5"
  compile "com.ibm.icu:icu4j:62.1"
  compile "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.7"

  compile 'com.k_int.grails:web-toolkit:4.3.0'
  compile 'com.k_int.okapi:grails-okapi:3.7.1'
  compile 'org.apache.kafka:kafka-clients:2.3.0'
  runtime "com.zaxxer:HikariCP:3.2.0"
  compile 'org.grails.plugins:rxjava'

  compile 'org.olf.rs:lib-ncip-client:0.10.1'
  compile 'com.github.jknack:handlebars:4.2.0'
  compile 'org.apache.commons:commons-collections4:4.4'


  compile 'org.jsoup:jsoup:1.10.2'
  compile 'org.json:json:20190722'
  compile 'org.extensiblecatalog.ncip.v2:service:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:common:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:binding-ilsdiv1_0_bc:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:binding-ilsdiv1_0:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:binding-wclv1_0:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:binding-ncipv2_02:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:binding-ncipv2_01:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:binding-jar:2.0.0'

  console "org.grails:grails-console"
  testCompile "org.grails:grails-gorm-testing-support"
  testCompile "org.grails:grails-datastore-rest-client"
  testCompile "org.grails:grails-web-testing-support"
  testCompile "org.grails.plugins:geb:1.1.2"

  testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:2.47.2"
  testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.2"
  testRuntime "net.sourceforge.htmlunit:htmlunit:2.33"

  // compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
  compile 'io.github.http-builder-ng:http-builder-ng-core:1.0.3'
  compile 'org.w3c.css:sac:1.3'

  // Domain model for directory
  compile 'org.olf.reshare.dm.directory:dm-directory:1.1.18'
  compile 'org.scala-saddle:google-rfc-2445:20110304'

  // For RRule processing
  compile 'org.dmfs:lib-recur:0.11.6'
}
final String version_regex = /^(((\d+)\.\d+)\.\d+)(-([a-zA-Z]+\.\d+))?$/
version="${appVersion}"

bootRun {
  jvmArgs('-Dspring.output.ansi.enabled=always')
  addResources = true
  String springProfilesActive = 'spring.profiles.active'
  systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(Test) {
  systemProperty "geb.env", System.getProperty('geb.env')
  systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
  systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
  systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

sourceSets {
  main {
    resources {
      srcDir 'grails-app/migrations'
      srcDir 'src/main/okapi/tenant'
    }
  }
}

task generateDescriptors(type: Copy) {

  dependsOn buildProperties

  File grailsBuildInfoFile = buildProperties.outputs.files.files.find { it.name == 'grails.build.info' }

  final def props = [:]

  if(!(grailsBuildInfoFile)) return // No need to continue if the file is not there

  doFirst {

    // Place the loading within a do first as the info file from the buildProperties
    // task will not be present until it is executed. This owuld cause a file not found
    // during task configureation otherwise.
    Properties properties = new Properties()

    // Read properties from the file
    grailsBuildInfoFile.withInputStream {
      properties.load(it)
    }

    // Need to parse multi-dimensional keys.
    ConfigSlurper cs = new ConfigSlurper()
    props.putAll(cs.parse(properties))
  }

  from ('./src/main/okapi') {
    include '*-template.json'
  }
  
  into './build/resources/main/okapi'
  filteringCharset = 'UTF-8'
  expand(props)
  rename { String fileName ->
    fileName.replace('-template', '')
  }
}

jar {
  version "${version.replaceAll(version_regex, '$2')}"
}

springBoot {
  // Enable the creation of a fully
  // executable archive file.
  executable = true
}


buildProperties.doLast {

  // Find the right file
  File grailsBuildInfoFile = it.outputs.files.files.find { it.name == 'grails.build.info' }

  if(!grailsBuildInfoFile) return // No need to continue if the file is not there
    Properties properties = new Properties()

  // Read properties from the file
  grailsBuildInfoFile.withInputStream {
    properties.load(it)
  }

  // Load the app version
  String version = properties.getProperty('info.app.version')

  // Because order matters. The version may be missing from the properties. We should
  // re-add it if it is.
  if (version && !(version =~ version_regex)) {
    // Write the value again.
    version = project.version
    properties.setProperty('info.app.version', version)
  }

  def versionParts
  if (version && (versionParts = version =~ version_regex)) {
    versionParts[0].with {
      properties.setProperty('info.app.majorVersion', it[3])
      properties.setProperty('info.app.minorVersion', it[2])
      properties.setProperty('info.app.patchVersion', it[1])

      if (it[5]) {
        properties.setProperty('info.app.prVersion', it[5])
      }
    }
  }
  
  // Add new properties from various sources
  properties.setProperty('build.time', new Date().format("yyyy-MM-dd HH:mm:ss"))

  // Get a System property
  properties.setProperty('build.java.version', System.getProperty('java.version'))

  // Write the properties back to the file
  grailsBuildInfoFile.withOutputStream {
    properties.store(it,null)
  }
}

processResources.dependsOn generateDescriptors

/**
 * Docker build config.
 */
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

ext {
  dockerTag = "${project.dockerRepo}/${project.name}:${project.version}${dockerTagSuffix}"
  dockerBuildDir = mkdir("${buildDir}/docker")
}

task prepareDocker(type: Copy, dependsOn: assemble) {
  description = 'Copy files to build directory'
  group = 'Docker'

  from project.jar

  // from otherfileLoc

  into dockerBuildDir
}
task createDockerfile(type: Dockerfile, dependsOn: prepareDocker) {
  description = 'Create a Dockerfile file'
  group = 'Docker'

  destFile = project.file("${dockerBuildDir}/Dockerfile")

  from 'folioci/alpine-jre-openjdk8'
  maintainer 'Knowledge Integration'

  exposePort 8080

  // Copying straight into the default directory should be enough
  copyFile jar.archiveName, '/usr/verticles/application.jar'
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
  description = 'Create Docker image to run the Grails application'
  group = 'Docker'

  inputDir = file(dockerBuildDir)
  tag = dockerTag
}
