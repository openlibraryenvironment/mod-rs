repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://maven.indexdata.com/' }
  maven { url "https://repo.grails.org/grails/core" }
  maven { url "https://repo.grails.org/grails/plugins" }
  maven { url "https://jitpack.io" }
  maven { url "https://repository.folio.org/repository/maven-folio" }
  maven { url "https://maven.k-int.com/content/repositories/public" }
  maven { url "https://maven.k-int.com/repository/releases" }
  maven {
    name "reposiliteRepositoryReleases"
    url "https://reposilite.reshare.indexdata.com/releases"
  }
}

buildscript {
  repositories {
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://repo.grails.org/grails/plugins" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
    classpath "org.grails.plugins:views-gradle:2.3.2"
    classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
    classpath "org.grails.plugins:hibernate5:7.3.0"
    classpath 'org.grails.plugins:database-migration:4.2.0'
    classpath 'com.bmuschko:gradle-docker-plugin:6.6.1'
  }
}

final String version_regex = /^(((\d+)\.\d+)\.\d+)(-([a-zA-Z]+(\.\d+)?))?$/
Map<String, String> env = System.getenv();
String calculated_version = null;

if ( ( appVersion.contains('SNAPSHOT') ) && ( env.BUILD_NUMBER != null ) ) {
  println("Detected snapshot version and build number - appending");
  calculated_version = "${appVersion}.${env.BUILD_NUMBER}".toString()
}
else {
  println("Release version");
  calculated_version = "${appVersion}".toString()
}

version "${calculated_version}"
group "mod.rs"

apply plugin: 'idea'
apply plugin: 'org.grails.grails-web'
apply plugin: 'org.grails.plugins.views-json'
apply plugin: 'com.bmuschko.docker-remote-api'

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
if (DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
    grails { pathingJar = true }
}

sourceSets {
  main {
    resources {
      srcDir 'grails-app/migrations'
      srcDir 'src/main/okapi/tenant'
    }
  }
}

// https://github.com/grails/grails-core/issues/12181
bootJar {
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

dependencies {
  /* ---- Grails 5 ---- */
  //developmentOnly("org.springframework.boot:spring-boot-devtools")
  compileOnly "io.micronaut:micronaut-inject-groovy"
  console "org.grails:grails-console"
  // The version here is the version that in theory is pulled in from spring-boot-starter-logging according to dependenies
  implementation "org.springframework.boot:spring-boot-starter-logging"
//  implementation "org.springframework.boot:spring-boot-starter-validation"
  implementation "org.springframework.boot:spring-boot-autoconfigure"
  implementation "org.grails:grails-core"
  implementation "org.springframework.boot:spring-boot-starter-actuator"
  //implementation "org.springframework.boot:spring-boot-starter-tomcat"
  implementation "org.grails:grails-plugin-url-mappings"
  implementation "org.grails:grails-plugin-rest"
  implementation "org.grails:grails-plugin-codecs"
  implementation "org.grails:grails-plugin-interceptors"
  implementation "org.grails:grails-plugin-services"
  implementation "org.grails:grails-plugin-datasource"
  implementation "org.grails:grails-plugin-databinding"
  implementation "org.grails:grails-web-boot"
  implementation "org.grails:grails-logging"
  //implementation "org.grails.plugins:cache"
  implementation "org.grails.plugins:async"
  implementation "org.grails.plugins:hibernate5"
  implementation "org.hibernate:hibernate-core:5.6.11.Final"
  implementation "org.grails.plugins:events"
  implementation "org.grails.plugins:views-json"
  implementation "org.grails.plugins:views-json-templates"
  profile "org.grails.profiles:rest-api"
  //runtimeOnly "org.glassfish.web:el-impl:2.2.1-b05"
  //runtimeOnly "com.h2database:h2"
  //runtimeOnly "org.apache.tomcat:tomcat-jdbc"
  runtimeOnly "javax.xml.bind:jaxb-api:2.3.1"


  // Testing
  testImplementation "org.mockito:mockito-core"
  testImplementation "org.grails:grails-web-testing-support"

  /*  ---- Manually installed dependencies ---- */
  implementation 'org.grails.plugins:spring-security-core:5.2.1'

  // K-int
  implementation 'com.k_int.grails:web-toolkit-ce:8.1.0'
  implementation ('com.k_int.okapi:grails-okapi:6.0.0-rc.4') {
    exclude group: 'com.vaadin.external.google', module: 'android-json'
  }

  implementation 'io.github.http-builder-ng:http-builder-ng-core:1.0.4'
  implementation 'org.codehaus.janino:janino:3.1.9'
  implementation "org.springframework.boot:spring-boot-starter-undertow" // Replaces spring-boot-starter-tomcat
  implementation "org.hibernate:hibernate-java8:5.4.28.Final"
  runtimeOnly "com.zaxxer:HikariCP:5.1.0"
  runtimeOnly "org.postgresql:postgresql:42.5.3"
  implementation ('org.grails.plugins:database-migration:4.2.0') {
    exclude group: 'org.liquibase', module: 'liquibase-core'
    exclude group: 'com.vaadin.external.google', module: 'android-json'
  }
  // For getting the correct version of liquibase
  // implementation 'org.liquibase:liquibase-core:4.17.2'
  implementation 'org.liquibase:liquibase-core:4.19.1'
  implementation 'org.yaml:snakeyaml:1.33'

  implementation 'commons-io:commons-io:2.6'

  /*  ---- Manually installed testing dependencies ---- */
  testImplementation "org.grails.plugins:geb"
  testImplementation "org.seleniumhq.selenium:selenium-remote-driver:3.14.0"
  testImplementation "org.seleniumhq.selenium:selenium-api:3.14.0"
  testImplementation "org.seleniumhq.selenium:selenium-support:3.14.0"
  testRuntimeOnly "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
  testRuntimeOnly "org.seleniumhq.selenium:selenium-firefox-driver:3.14.0"
  implementation 'org.z3950.zing:cql-java:1.13'

  /* ---- Custom non profile deps ---- */
  implementation 'org.apache.kafka:kafka-clients:2.3.0'
  implementation 'com.github.everit-org.json-schema:org.everit.json.schema:1.12.2'

  // implementation 'com.github.everit-org.json-schema:org.everit.json.schema:1.12.2'
  // Better test reports.
  testImplementation( 'com.athaydes:spock-reports:2.3.2-groovy-3.0' ) {
    transitive = false // this avoids affecting your version of Groovy/Spock
  }

  // Data-model dependency
//  compile 'org.olf.reshare.dm.directory:dm-directory:2.0.1'
  implementation ('org.olf.reshare.dm.directory:dm-directory:2.0.1') {       // Required by Grails Okapi
    exclude group: 'com.k_int.grails', module: 'web-toolkit-ce'
  }

  // NCIP deps
  implementation 'org.olf.rs:lib-ncip-client:0.23.12'
  implementation 'com.github.jknack:handlebars:4.2.0'
  implementation 'uk.co.cacoethes:groovy-handlebars-engine:0.2'
  implementation 'org.apache.commons:commons-collections4:4.4'
  implementation 'org.jsoup:jsoup:1.10.2'
  implementation 'org.json:json:20190722'
  implementation 'org.extensiblecatalog.ncip.v2:service:2.0.0'
  implementation 'org.extensiblecatalog.ncip.v2:common:2.0.0'
  implementation 'org.extensiblecatalog.ncip.v2:binding-ilsdiv1_0_bc:2.0.0'
  implementation 'org.extensiblecatalog.ncip.v2:binding-ilsdiv1_0:2.0.0'
  implementation 'org.extensiblecatalog.ncip.v2:binding-wclv1_0:2.0.0'
  implementation 'org.extensiblecatalog.ncip.v2:binding-ncipv2_02:2.0.0'
  implementation 'org.extensiblecatalog.ncip.v2:binding-ncipv2_01:2.0.0'
  implementation 'org.extensiblecatalog.ncip.v2:binding-jar:2.0.0'

  // Domain model for directory
  implementation 'org.scala-saddle:google-rfc-2445:20110304'
  // For RRule processing
  implementation 'org.dmfs:lib-recur:0.11.6'

  // For graphviz
  implementation 'guru.nidi:graphviz-java-all-j2v8:0.18.1'

  // For jasper reports
  implementation 'net.sf.jasperreports:jasperreports:6.19.1'
  implementation 'net.sf.jasperreports:jasperreports-fonts:6.19.1'
  implementation 'net.sf.barcode4j:barcode4j:2.1'
  implementation 'org.apache.xmlgraphics:batik-bridge:1.14'

  // For swagger
  implementation 'org.grails.plugins:swagger-grails:0.5.0'
  implementation("io.swagger:swagger-annotations:1.6.6") {
    exclude group: "javax.validation", module: "validation-api"
  }
  implementation("io.swagger:swagger-models:1.6.6") {
    exclude group: "javax.validation", module: "validation-api"
  }

  // Minio, used to store to S3
  implementation "io.minio:minio:8.3.3"
  implementation 'com.squareup.okhttp3:okhttp:4.8.1'
  implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.3.70'

  // For generating json log files
  implementation 'net.logstash.logback:logstash-logback-encoder:7.2'

  // For the http builder
  implementation 'io.github.http-builder-ng:http-builder-ng-apache:1.0.4'

  // For the uri builder
  implementation 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

  // Iso java classes
  implementation 'org.olf.rs.iso18626:iso18626-client:1.2'
}

bootRun {
  ignoreExitValue true
  jvmArgs(
      '-Dspring.output.ansi.enabled=always',
      '-noverify',
      '-XX:TieredStopAtLevel=1',
      '-Xmx1024m'
  )
  sourceResources sourceSets.main
  String springProfilesActive = 'spring.profiles.active'
  systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

task generateDescriptors(type: Copy) {

  dependsOn buildProperties

  File grailsBuildInfoFile = buildProperties.outputs.files.files.find { it.name == 'grails.build.info' }

  final def props = [:]

  if(!(grailsBuildInfoFile)) return // No need to continue if the file is not there

  doFirst {

    // Place the loading within a do first as the info file from the buildProperties
    // task will not be present until it is executed. This owuld cause a file not found
    // during task configureation otherwise.
    Properties properties = new Properties()

    // Read properties from the file
    grailsBuildInfoFile.withInputStream {
      properties.load(it)
    }

    // Need to parse multi-dimensional keys.
    ConfigSlurper cs = new ConfigSlurper()
    props.putAll(cs.parse(properties))
  }

  from ('./src/main/okapi') {
    include '*-template.json'
  }
  
  into './build/resources/main/okapi'
  filteringCharset = 'UTF-8'
  expand(props)
  rename { String fileName ->
    fileName.replace('-template', '')
  }
}

jar {
  version "${version.replaceAll(version_regex, '$2')}"
}

buildProperties.doLast {

  // Find the right file
  File grailsBuildInfoFile = it.outputs.files.files.find { it.name == 'grails.build.info' }

  if(!grailsBuildInfoFile) return // No need to continue if the file is not there
    Properties properties = new Properties()

  // Read properties from the file
  grailsBuildInfoFile.withInputStream {
    properties.load(it)
  }

  // Load the app version
  String version = properties.getProperty('info.app.version')

  // Because order matters. The version may be missing from the properties. We should
  // re-add it if it is.
  if (version && !(version =~ version_regex)) {
    // Write the value again.
    version = project.version
    properties.setProperty('info.app.version', version)
  }
  else {
    println("No version")
  }

  def versionParts
  if (version && (versionParts = version =~ version_regex)) {
    versionParts[0].with {
      properties.setProperty('info.app.majorVersion', it[3])
      properties.setProperty('info.app.minorVersion', it[2])
      properties.setProperty('info.app.patchVersion', it[1])

      if (it[5]) {
        properties.setProperty('info.app.prVersion', it[5])
      }
    }
  }

  // Add in build number and other useful build env properties
  // Map<String, String> env = System.getenv()
  // println("Build env: ${env}")
  
  // Add new properties from various sources
  properties.setProperty('build.time', new Date().format("yyyy-MM-dd HH:mm:ss"))

  // Get a System property
  properties.setProperty('build.java.version', System.getProperty('java.version'))

  if(env.BUILD_NUMBER)
    properties.setProperty('build.number', env.BUILD_NUMBER)

  if ( env.GIT_REVISION ) {
    properties.setProperty('build.git.revision', env.GIT_REVISION)
    properties.setProperty('git.revision', env.GIT_REVISION)
  }

  if ( env.GIT_BRANCH ) {
    properties.setProperty('build.git.branch', env.GIT_BRANCH)
    properties.setProperty('git.branch', env.GIT_BRANCH)
  }

  if (env.GIT_COMMIT) {
    properties.setProperty('build.git.commit', env.GIT_COMMIT)
    properties.setProperty('git.commit', env.GIT_COMMIT)
  }


  // Write the properties back to the file
  grailsBuildInfoFile.withOutputStream {
    properties.store(it,null)
  }
}

processResources.dependsOn generateDescriptors

tasks.named('bootJarMainClassName') { it.mustRunAfter(tasks.named('compileGsonViews')) }
tasks.named('compileIntegrationTestGroovy') { it.mustRunAfter(tasks.named('compileGsonViews')) }
tasks.named('test') { it.mustRunAfter(tasks.named('compileGsonViews')) }
tasks.named('integrationTest') { it.mustRunAfter(tasks.named('compileGsonViews')) }
tasks.named('mergeTestReports') { it.mustRunAfter(tasks.named('test')) }
tasks.named('compileTestGroovy') { it.mustRunAfter(tasks.named('compileGsonViews')) }

tasks.withType(Test) {
  useJUnitPlatform()
  systemProperty "geb.env", System.getProperty('geb.env')
  systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
  systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
  systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

springBoot {
  mainClass = 'mod.rs.Application'
}

