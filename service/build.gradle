buildscript {
  repositories {
    jcenter()
    maven { url "https://repo.grails.org/grails/core" }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "org.grails.plugins:views-gradle:2.0.1"
    classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:2.0"
    classpath "org.grails.plugins:hibernate5:${gormHibernate-".RELEASE"}"
    classpath 'org.grails.plugins:database-migration:3.1.0'
    classpath 'com.bmuschko:gradle-docker-plugin:6.6.1'
  }
}


final String version_regex = /^(((\d+)\.\d+)\.\d+)(-([a-zA-Z]+\.\d+))?$/
version "${appVersion}"
group "mod.rs"

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.grails.grails-web'
apply plugin: 'org.grails.plugins.views-json'
apply plugin: 'com.github.erdi.webdriver-binaries'
apply plugin: 'com.bmuschko.docker-remote-api'

eclipse {
  classpath {
    file {
      whenMerged {
        def confEntries = (entries.findAll { it.path == 'grails-app/conf' }) as List

        if (confEntries) {
          def singleEnty = confEntries[0]

          // Remove all the entries.
          entries.removeAll ( confEntries )

          // Set the output directory, and re-add.
          singleEnty.output = "bin/main"
          entries << singleEnty
        }
      }
    }
  }
}

repositories {
  maven { url 'http://maven.k-int.com/content/repositories/public' }
  jcenter()
  mavenLocal()
  maven { url 'https://repo.grails.org/grails/core' }
  maven { url 'http://maven.indexdata.com/' }
  maven { url "https://repository.folio.org/repository/maven-folio" }
}

sourceSets {
  main {
    resources {
      srcDir 'grails-app/migrations'
      srcDir 'src/main/okapi/tenant'
    }
  }
}

dependencies {

 /**** Grails 4 *****/
  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.grails:grails-core"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-codecs"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-datasource"
  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-web-boot"
  compile "org.grails:grails-logging"
  compile "org.grails.plugins:async"
  compile "org.grails.plugins:views-json"
  compile "org.grails.plugins:views-json-templates"
  compile "org.grails.plugins:events"
  compile "org.grails.plugins:hibernate5"
  compileOnly "io.micronaut:micronaut-inject-groovy"



  console ("org.grails:grails-console") {
    // The gpars transient depends on an older version of groovy-all.
    exclude group: 'org.codehaus.groovy', module: 'groovy'
  }

  profile "org.grails.profiles:rest-api"
  // runtime "com.h2database:h2"
  runtime "javax.xml.bind:jaxb-api:2.3.1"

  // non-graphql dependency
  compile 'org.olf.reshare.dm.directory:dm-directory:2.0.0'

  profile "org.grails.profiles:rest-api"


  runtime "com.zaxxer:HikariCP:3.2.0"



  /************** Testing ************/
  testCompile "org.grails:grails-gorm-testing-support"

  testCompile "org.mockito:mockito-core"
  testCompile "org.grails:grails-web-testing-support"
  testCompile "org.grails.plugins:geb"
  //  testCompile "io.micronaut:micronaut-http-client"
  testCompile "org.seleniumhq.selenium:selenium-remote-driver:3.14.0"
  testCompile "org.seleniumhq.selenium:selenium-api:3.14.0"
  testCompile "org.seleniumhq.selenium:selenium-support:3.14.0"
  testCompile 'org.grails:grails-datastore-rest-client:6.1.9.RELEASE'
  testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.14.0"
  testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.14.0"
  compile 'org.z3950.zing:cql-java:1.13'


  compile "org.springframework.boot:spring-boot-starter-undertow" // Replaces spring-boot-starter-tomcat
  compile "org.hibernate:hibernate-core:5.4.19.Final"             // Update to latest 5.4
  compile "org.hibernate:hibernate-java8:5.4.19.Final"
  runtime "com.zaxxer:HikariCP:3.4.5"                             // Replaces Tomcat JDBC pool
  runtime "org.postgresql:postgresql:42.2.14"

  compile ('org.grails.plugins:database-migration:3.1.0') {       // Required by Grails Okapi
    exclude group: 'org.liquibase', module: 'liquibase-core'
  }
  compile 'org.liquibase:liquibase-core:3.9.0'

  compile 'com.opencsv:opencsv:4.6'
  compile 'commons-io:commons-io:2.6'

  compile 'com.k_int.grails:web-toolkit-ce:5.0.0-rc.5'
  compile 'com.k_int.okapi:grails-okapi:4.0.0-rc.1'

  // Custom non profile deps.
  compile 'org.apache.kafka:kafka-clients:2.3.0'
  runtime "org.grails.plugins:async"
  runtime "org.grails.plugins:events"
  compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'

  // Better test reports.
  testCompile( 'com.athaydes:spock-reports:1.6.1' ) {
    transitive = false // this avoids affecting your version of Groovy/Spock
  }

  // NCIP deps
  compile 'org.olf.rs:lib-ncip-client:0.11.0'
  compile 'com.github.jknack:handlebars:4.2.0'
  compile 'uk.co.cacoethes:groovy-handlebars-engine:0.2'
  compile 'org.apache.commons:commons-collections4:4.4'
  compile 'org.jsoup:jsoup:1.10.2'
  compile 'org.json:json:20190722'
  compile 'org.extensiblecatalog.ncip.v2:service:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:common:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:binding-ilsdiv1_0_bc:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:binding-ilsdiv1_0:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:binding-wclv1_0:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:binding-ncipv2_02:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:binding-ncipv2_01:2.0.0'
  compile 'org.extensiblecatalog.ncip.v2:binding-jar:2.0.0'

  // Domain model for directory
  compile 'org.scala-saddle:google-rfc-2445:20110304'
  // For RRule processing
  compile 'org.dmfs:lib-recur:0.11.6'
}

bootRun {
  ignoreExitValue true
  jvmArgs(
      '-Dspring.output.ansi.enabled=always',
      '-server',
      '-noverify',
      '-XX:TieredStopAtLevel=1',
      '-Xmx1024m')
  sourceResources sourceSets.main
  String springProfilesActive = 'spring.profiles.active'
  systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

task generateDescriptors(type: Copy) {

  dependsOn buildProperties

  File grailsBuildInfoFile = buildProperties.outputs.files.files.find { it.name == 'grails.build.info' }

  final def props = [:]

  if(!(grailsBuildInfoFile)) return // No need to continue if the file is not there

  doFirst {

    // Place the loading within a do first as the info file from the buildProperties
    // task will not be present until it is executed. This owuld cause a file not found
    // during task configureation otherwise.
    Properties properties = new Properties()

    // Read properties from the file
    grailsBuildInfoFile.withInputStream {
      properties.load(it)
    }

    // Need to parse multi-dimensional keys.
    ConfigSlurper cs = new ConfigSlurper()
    props.putAll(cs.parse(properties))
  }

  from ('./src/main/okapi') {
    include '*-template.json'
  }
  
  into './build/resources/main/okapi'
  filteringCharset = 'UTF-8'
  expand(props)
  rename { String fileName ->
    fileName.replace('-template', '')
  }
}

jar {
  version "${version.replaceAll(version_regex, '$2')}"
}

buildProperties.doLast {

  // Find the right file
  File grailsBuildInfoFile = it.outputs.files.files.find { it.name == 'grails.build.info' }

  if(!grailsBuildInfoFile) return // No need to continue if the file is not there
    Properties properties = new Properties()

  // Read properties from the file
  grailsBuildInfoFile.withInputStream {
    properties.load(it)
  }

  // Load the app version
  String version = properties.getProperty('info.app.version')

  // Because order matters. The version may be missing from the properties. We should
  // re-add it if it is.
  if (version && !(version =~ version_regex)) {
    // Write the value again.
    version = project.version
    properties.setProperty('info.app.version', version)
  }

  def versionParts
  if (version && (versionParts = version =~ version_regex)) {
    versionParts[0].with {
      properties.setProperty('info.app.majorVersion', it[3])
      properties.setProperty('info.app.minorVersion', it[2])
      properties.setProperty('info.app.patchVersion', it[1])

      if (it[5]) {
        properties.setProperty('info.app.prVersion', it[5])
      }
    }
  }
  
  // Add new properties from various sources
  properties.setProperty('build.time', new Date().format("yyyy-MM-dd HH:mm:ss"))

  // Get a System property
  properties.setProperty('build.java.version', System.getProperty('java.version'))

  // Write the properties back to the file
  grailsBuildInfoFile.withOutputStream {
    properties.store(it,null)
  }
}

processResources.dependsOn generateDescriptors
