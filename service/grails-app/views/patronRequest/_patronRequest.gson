import groovy.transform.*
import org.olf.rs.PatronRequest;

@Field PatronRequest patronRequest
final boolean fullRecord = (params.get('_view', (actionName == 'index' ? 'brief' : 'full')) == 'full') || (params.fullRecord == "true")

final def toExpand = fullRecord ? [
  // Full expanded set...
  'copyrightType',
  'state',
  'stateModel',
  'serviceType',
  'publicationType',
  'deliveryMethod',
  'pickLocation',
  'pickShelvingLocation',
  'rota',
  'tags',
  'audit',
  'notifications',
  'cancellationReason',
  'conditions',
  'protocolAudit',
  'resolvedRequester',
  'resolvedPatron',
  'resolvedSupplier',
  'resolvedPickupLocation',
  'requestIdentifiers',
  'validActions',
  'customIdentifiers'
] : [
  // brief record view..
  'pickShelvingLocation',
  'resolvedSupplier',
  'serviceType',
  'state'
]

final def toExclude = fullRecord ? [
  // Full excluded set...
  'batches',
  'pickLocation', // Resolved explicitly
  'volumes' // Resolved explicitly
] : [
  // brief record excludes ...
  'audit',
  'batches',
  'cancellationReason',
  'conditions',
  'copyrightType',
  'customProperties',
  'networkStatus',
  'notifications',
  'pickLocation', // Resolved explicitly
  'preErrorStatus',
  'previousStates',
  'publicationType',
  'requestIdentifiers',
  'resolvedPatron',
  'resolvedPickupLocation',
  'resolvedRequester',
  'rota',
  'stateModel',
  'tags',
  'volumes' // Resolved explicitly
]

json g.render(patronRequest, [expand: toExpand,
                              excludes: toExclude]) {

  if (fullRecord) {
    validActions g.render(patronRequest.validActions, [excludes: ['id', 'triggerType', 'model', 'fromState', 'actionEvent', 'resultList']])
  }

  // Required for list display  
  volumes g.render(patronRequest.volumes?.sort {a,b ->
    a.name <=> b.name ?: a.itemId <=> b.itemId
  }) ?: []

  // Required for supplier list display  
  if ( patronRequest.pickLocation ) {
    pickLocation g.render( patronRequest.pickLocation, [excludes: ['correspondingDirectoryEntry']] ) {
      correspondingDirectoryEntry {
        id patronRequest.pickLocation.correspondingDirectoryEntry?.id
        name patronRequest.pickLocation.correspondingDirectoryEntry?.name
        if (patronRequest.pickLocation.correspondingDirectoryEntry?.symbols) {
          symbols g.render(patronRequest.pickLocation.correspondingDirectoryEntry?.symbols, [
            expand: ['authority'],
            excludes: ['owner', 'parent']
          ])
        }
      }
    }
  }
}
